PEG = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = "\\",
        peg$c1 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c2 = "AND",
        peg$c3 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c4 = "and",
        peg$c5 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c6 = function(v) { return v.toUpperCase(); },
        peg$c7 = "OR",
        peg$c8 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c9 = "or",
        peg$c10 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c11 = "=",
        peg$c12 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c13 = "!=",
        peg$c14 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c15 = ">",
        peg$c16 = { type: "literal", value: ">", description: "\">\"" },
        peg$c17 = ">=",
        peg$c18 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c19 = "<",
        peg$c20 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c21 = "<=",
        peg$c22 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c23 = "CONTAINS",
        peg$c24 = { type: "literal", value: "CONTAINS", description: "\"CONTAINS\"" },
        peg$c25 = "contains",
        peg$c26 = { type: "literal", value: "contains", description: "\"contains\"" },
        peg$c27 = "(",
        peg$c28 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c29 = ")",
        peg$c30 = { type: "literal", value: ")", description: "\")\"" },
        peg$c31 = "\"",
        peg$c32 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c33 = "true",
        peg$c34 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c35 = "false",
        peg$c36 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c37 = /^[0-9]/,
        peg$c38 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c39 = /^[0-9a-f]/i,
        peg$c40 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
        peg$c41 = /^[ \t\n\r]/,
        peg$c42 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c43 = /^[ -!#-[\]-\u10FFFF]/,
        peg$c44 = { type: "class", value: "[\\x20-\\x21\\x23-\\x5B\\x5D-\\u10FFFF]", description: "[\\x20-\\x21\\x23-\\x5B\\x5D-\\u10FFFF]" },
        peg$c45 = function(chars) { return chars.join(""); },
        peg$c46 = /^[+\-]/,
        peg$c47 = { type: "class", value: "[\\+\\-]", description: "[\\+\\-]" },
        peg$c48 = ".",
        peg$c49 = { type: "literal", value: ".", description: "\".\"" },
        peg$c50 = function() { return Number(text()); },
        peg$c51 = function(v) { return v.toLowerCase() === 'true'; },
        peg$c52 = /^[^=() \t\n\r]/,
        peg$c53 = { type: "class", value: "[^=\\(\\) \\t\\n\\r]", description: "[^=\\(\\) \\t\\n\\r]" },
        peg$c54 = function() { return text(); },
        peg$c55 = "/",
        peg$c56 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c57 = "b",
        peg$c58 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c59 = function() { return "\b"; },
        peg$c60 = "f",
        peg$c61 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c62 = function() { return "\f"; },
        peg$c63 = "n",
        peg$c64 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c65 = function() { return "\n"; },
        peg$c66 = "r",
        peg$c67 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c68 = function() { return "\r"; },
        peg$c69 = "t",
        peg$c70 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c71 = function() { return "\t"; },
        peg$c72 = "u",
        peg$c73 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c74 = function(digits) {
                  return String.fromCharCode(parseInt(digits, 16));
                },
        peg$c75 = function(sequence) { return sequence; },
        peg$c76 = function(op) { return ComparisonOperator.fromString(text()); },
        peg$c77 = function() { return LogicalOperator.fromString(text()); },
        peg$c78 = function(g) { return g; },
        peg$c79 = function(cg) { return cg; },
        peg$c80 = function(head, op, cg) { return { op:op, cg:cg }; },
        peg$c81 = function(head, tail) {
        	if (!tail) {
                    const items = [head];
        	    return head;
        	} else {
                    const items = [head, tail.cg];
        	    const op = tail.op;
                    const cg = new ConditionGroup(op, items);
                    return cg;
                }
               },
        peg$c82 = function(cg) {
              return cg;
            },
        peg$c83 = function(cond) { return { op:LogicalOperator.AND, cond:cond}; },
        peg$c84 = function(head, op, cond) { return { op:op, cond:cond }; },
        peg$c85 = function(head, tail) {
                const items = [head].concat(tail);
        	const conds = items.map(x => { return x.cond; });
        	let cg;
        	if (items.length === 1) {
        	    cg = new ConditionGroup(LogicalOperator.AND, conds);
                } else {
                    const ops = items.map(x => { return x.op; });
        	    ops.shift();
                    const opSet = new Set(ops);
                    if (opSet.size > 1) {
                        throw 'AND と OR は併用できません';
                    }
        	    const op = opSet.values().next().value;
                    cg = new ConditionGroup(op, conds);
        	}
        	return cg;
              },
        peg$c86 = function(k, op, v) { return new Condition(k, op, v); },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parseExpression();

      return s0;
    }

    function peg$parseEscape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c0;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parseAND() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c4) {
          s1 = peg$c4;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseOR() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseEQ() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c11;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }

      return s0;
    }

    function peg$parseNE() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c13) {
        s0 = peg$c13;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }

      return s0;
    }

    function peg$parseGT() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 62) {
        s0 = peg$c15;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }

      return s0;
    }

    function peg$parseGE() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c17) {
        s0 = peg$c17;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }

      return s0;
    }

    function peg$parseLT() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 60) {
        s0 = peg$c19;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c20); }
      }

      return s0;
    }

    function peg$parseLE() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c21) {
        s0 = peg$c21;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }

      return s0;
    }

    function peg$parseCONTAINS() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c23) {
        s1 = peg$c23;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c25) {
          s1 = peg$c25;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseL_PAR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c27;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }

      return s0;
    }

    function peg$parseR_PAR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }

      return s0;
    }

    function peg$parseDQ() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c31;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseTRUE() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c33) {
        s0 = peg$c33;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }

      return s0;
    }

    function peg$parseFALSE() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c35) {
        s0 = peg$c35;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c36); }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c37.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c39.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      s0 = [];
      if (peg$c41.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c41.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
      }

      return s0;
    }

    function peg$parseUnescaped() {
      var s0;

      if (peg$c43.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQ();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseChar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseChar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQ();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c45(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (peg$c46.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c37.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c48;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c37.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c37.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c50();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBoolean() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTRUE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseFALSE();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseKey() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c54();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseValue() {
      var s0;

      s0 = peg$parseString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBoolean();
        }
      }

      return s0;
    }

    function peg$parseChar() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseUnescaped();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseEscape();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c31;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c0;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c55;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c57;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c58); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c59();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c60;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c62();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c63;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c64); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c65();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c66;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c67); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c68();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c69;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c70); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c71();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c72;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c73); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            s6 = peg$parseHEXDIG();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG();
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                              s4 = input.substring(s4, peg$currPos);
                            } else {
                              s4 = s5;
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c74(s4);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseComparisonOperator() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseGE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLE();
        if (s1 === peg$FAILED) {
          s1 = peg$parseEQ();
          if (s1 === peg$FAILED) {
            s1 = peg$parseNE();
            if (s1 === peg$FAILED) {
              s1 = peg$parseGT();
              if (s1 === peg$FAILED) {
                s1 = peg$parseLT();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseCONTAINS();
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c76(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLogicalOperator() {
      var s0, s1;

      s0 = peg$parseAND();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseOR();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGrammar();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c78(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseGrammar() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseConditionGroups();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseConditionGroups() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseConditionGroup();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsews();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseLogicalOperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsews();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseConditionGroup();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c80(s1, s4, s6);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseConditionGroup() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseL_PAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_ConditionGroup();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseR_PAR();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c79(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_ConditionGroup();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c82(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parse_ConditionGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseCondition();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c83(s2);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsews();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseLogicalOperator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsews();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseCondition();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c84(s1, s5, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsews();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLogicalOperator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsews();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCondition();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c84(s1, s5, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c85(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      return s0;
    }

    function peg$parseCondition() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseKey();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseComparisonOperator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseValue();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c86(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }



    const LogicalOperator = {
        AND: "AND",
        OR: "OR",
        fromString: function (str) {
            str = str.toUpperCase();
            const items = [LogicalOperator.AND, LogicalOperator.OR];
    	for (const item of items) {
    	    if (item === str) {
                    return item;
                }
    	}
    	throw new Error(`Not supported: logical operator:${str}`);
        }
    };

    const cops = [['GE', '>='], ['LE', '<='], ['EQ', '==='], ['NE', '!=='], ['GT', '>'], ['LT', '<'], ['CONTAINS', 'CONTAINS']];
    class ComparisonOperator {
        constructor(name, op) {
            this.name = name;
            this.op = op;
    	let fml;
    	if (name === 'CONTAINS') {
    	    fml = `(a === undefined || a === null) ? false : a.includes(b)`;
            } else {
                fml = `a ${op} b`;
    	}
            this.func = function (a, b) {
                return eval(fml);
            };
        }

        static fromString(str) {
            switch (str) {
            case '=':
    	   str = '==='; break;
            case '!=':
    	   str = '!=='; break;
            default:
               str = str.toUpperCase(); break;
            }
            const items = cops.map(x => ComparisonOperator[x[0]]);
    	for (const item of items) {
    	    if (item.op === str) {
                    return item;
                }
    	}
    	throw new Error(`Not supported: comparison operator:${str}`);
        }
    }
    for (const cop of cops) {
        const name = cop[0];
        const op = cop[1];
        ComparisonOperator[name] = new ComparisonOperator(name, op);
    }


    class Condition {
        constructor(k, op, v) {
            this.classname = "Condition";    
    	this.key = k;
    	this.op = op;
    	this.value = v;
        }
    }

    class ConditionGroup {
        constructor(op, conditions) {
            this.classname = "ConditionGroup";
            this.op = op;
    	this.conditions = conditions;
        }
    }



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
class JsonUtils {

    static get_value_from_path(original_json, json_path) {
	const elements = json_path.split(".");
	let json = original_json;
	let exist = true;
	if (!elements) {
	    return undefined;
	}
	for (const element of elements) {
	    if (!json) {
		exist = false;
		break;
	    }
	    json = json[element];
	}
	if (!exist) {
	    return undefined;
	}
	return json;
    }
}


class ItemFilter {

    constructor (configGroup, items, itemKey) {
	this.configGroup = configGroup;
	this.original_items = items;
	this.items = Array.from(this.original_items);
	this.itemKey = itemKey;
    }

    _contains (item, key, operator, value) {
	const act = JsonUtils.get_value_from_path(item, key);
	const func = operator.func;
	return func(act, value);
    }
    
    _calc_condition(cond) {
	const ids = [];
	const key = cond.key;
	const op = cond.op;
	const value = cond.value;
	for (const item of this.items) {
	    if (!this._contains(item, key, op, value)) {
		continue;
	    }
	    ids.push(item[this.itemKey]);
	}
	//console.log(`${key} ${op} ${value}: ids=${ids}`);
	cond.ids = ids;
    }

    _get_all_id_set(idSetList) {
	const set = new Set();
	for (const idSet of idSetList) {
	    for (const id of idSet) {
		set.add(id);
	    }
	}
	return set;
    }

    _get_common_id_set(allIdSet, idSetList) {
	const set = new Set();
	for (const id of allIdSet) {
	    let flag = true;
	    for (const idSet of idSetList) {
		if (!idSet.has(id)) {
		    flag = false;
		    break;
		}
	    }
	    if (flag === true) {
		set.add(id);
	    }
	}
	return set;
    }
    
    _calc_condition_group(cg) {
	const idSetList = [];
	const children = cg.conditions;
	for (const child of children) {
	    const ids = child.ids;
	    if (ids) {
		idSetList.push(new Set(ids));
		continue;
	    }
	    idSetList.push(null);
	    this._calc(child);
	}
	if (idSetList.some(x => x === null)) {
	    return;
	}
	const allIdSet = this._get_all_id_set(idSetList);
	let filteredIds;
	switch (cg.op) {
	case 'AND':	    
	    filteredIds = this._get_common_id_set(allIdSet, idSetList);
	    break;
	case 'OR':
	    filteredIds = allIdSet;
	    break;
	default:
	    throw new Error();
	}
	cg.ids = filteredIds;
    }

    _calc(cond) {
	if (cond.ids) {
	    return;
	}
	const className = cond.constructor.name;
	switch(className) {
	case 'Condition':
	    this._calc_condition(cond);		
	    break;
	case 'ConditionGroup':
	    this._calc_condition_group(cond);
	    break;
	}
    }

    _filterItem() {
	const items = [];
	const idSet = this.configGroup.ids;	
	for (const item of this.items) {
	    if (idSet.has(item.id)) {
		items.push(item);
	    }
	}
	return items;
    }

    execute () {
	while (!this.configGroup.ids) {
	    this._calc(this.configGroup);
	}
	return this._filterItem();
    }
}

class JQL {

    static filter(query, items, itemKey) {
	const condition = PEG.parse(query);
	const filter = new ItemFilter(condition, items, itemKey);
	return filter.execute();
    }
}

if (!this.window) {
    module.exports = {
	PEG: PEG,
	JQL: JQL
    };
}
